# GaryÃ—Taleb Trading System - Helm Values
# Defense Industry Production Configuration

# Global configuration
global:
  environment: production
  namespace: gary-taleb-trading
  imageRegistry: ghcr.io
  imagePullSecrets:
    - name: ghcr-secret
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000

# Trading application configuration
tradingApp:
  name: gary-taleb-trading
  replicaCount: 6

  image:
    repository: ghcr.io/gary-taleb-trading/trading-app
    tag: latest
    pullPolicy: IfNotPresent

  # Resource requirements for high-performance trading
  resources:
    requests:
      memory: "2Gi"
      cpu: "1000m"
    limits:
      memory: "8Gi"
      cpu: "4000m"

  # Environment variables
  env:
    - name: NODE_ENV
      value: "production"
    - name: LOG_LEVEL
      value: "info"
    - name: TRADING_MODE
      value: "live"
    - name: COMPLIANCE_MODE
      value: "defense-industry"
    - name: DB_HOST
      valueFrom:
        secretKeyRef:
          name: database-credentials
          key: host
    - name: DB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: database-credentials
          key: password
    - name: REDIS_HOST
      valueFrom:
        secretKeyRef:
          name: redis-credentials
          key: host
    - name: REDIS_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          name: redis-credentials
          key: auth_token

  # Health checks
  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /ready
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  # Service configuration
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9090"
      prometheus.io/path: "/metrics"

# API Gateway configuration
apiGateway:
  enabled: true
  name: gary-taleb-api-gateway
  replicaCount: 3

  image:
    repository: ghcr.io/gary-taleb-trading/api-gateway
    tag: latest
    pullPolicy: IfNotPresent

  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "2Gi"
      cpu: "1000m"

  service:
    type: LoadBalancer
    port: 443
    targetPort: 8443
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-1:ACCOUNT_ID:certificate/CERT_ID"
      service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"

# Market data processor configuration
marketDataProcessor:
  enabled: true
  name: market-data-processor
  replicaCount: 4

  image:
    repository: ghcr.io/gary-taleb-trading/market-data-processor
    tag: latest
    pullPolicy: IfNotPresent

  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "4Gi"
      cpu: "2000m"

  # High-performance networking
  hostNetwork: false
  dnsPolicy: ClusterFirst

  # Node affinity for performance
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: trading.gary-taleb.com/optimized
          operator: In
          values:
          - "true"

# Risk management service
riskManager:
  enabled: true
  name: risk-manager
  replicaCount: 2

  image:
    repository: ghcr.io/gary-taleb-trading/risk-manager
    tag: latest
    pullPolicy: IfNotPresent

  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "4Gi"
      cpu: "2000m"

  # Critical service - high availability
  podDisruptionBudget:
    minAvailable: 1

# Order execution engine
orderExecutor:
  enabled: true
  name: order-executor
  replicaCount: 3

  image:
    repository: ghcr.io/gary-taleb-trading/order-executor
    tag: latest
    pullPolicy: IfNotPresent

  resources:
    requests:
      memory: "2Gi"
      cpu: "1000m"
    limits:
      memory: "8Gi"
      cpu: "4000m"

  # Ultra-low latency requirements
  tolerations:
  - key: "trading-apps"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/secure-backends: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"

  hosts:
    - host: api.gary-taleb.trading
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: gary-taleb-api-gateway
              port:
                number: 443

  tls:
    - secretName: gary-taleb-tls
      hosts:
        - api.gary-taleb.trading

# Autoscaling configuration
autoscaling:
  enabled: true
  tradingApp:
    minReplicas: 6
    maxReplicas: 50
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

  marketDataProcessor:
    minReplicas: 4
    maxReplicas: 20
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: 75

# Security configurations
security:
  networkPolicies:
    enabled: true
    denyAll: false
    allowNamespaces:
      - kube-system
      - monitoring
      - logging

  podSecurityPolicy:
    enabled: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true

  serviceAccount:
    create: true
    name: "gary-taleb-trading"
    annotations:
      eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/gary-taleb-trading-role"

# Monitoring configuration
monitoring:
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 15s
      scrapeTimeout: 10s

  grafana:
    enabled: true
    dashboards:
      enabled: true
      configMapName: gary-taleb-dashboards

  alerts:
    enabled: true
    rules:
      - alert: TradingAppDown
        expr: up{job="gary-taleb-trading"} == 0
        for: 1m
        severity: critical
      - alert: HighLatency
        expr: http_request_duration_seconds{quantile="0.95"} > 0.1
        for: 2m
        severity: warning
      - alert: ErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.01
        for: 2m
        severity: warning

# Storage configuration
persistence:
  enabled: true
  storageClass: "gp3"
  accessMode: ReadWriteOnce
  size: 100Gi

  # Backup configuration
  backup:
    enabled: true
    schedule: "0 2 * * *"
    retention: "30d"

# Database configuration (external)
postgresql:
  enabled: false # Using external RDS
  external:
    host: "" # Set by deployment pipeline
    port: 5432
    database: "trading_system"
    existingSecret: "database-credentials"

# Redis configuration (external)
redis:
  enabled: false # Using external ElastiCache
  external:
    host: "" # Set by deployment pipeline
    port: 6379
    existingSecret: "redis-credentials"

# Logging configuration
logging:
  level: "info"
  format: "json"
  destinations:
    - stdout
    - cloudwatch

  fluent-bit:
    enabled: true
    outputs:
      - name: cloudwatch
        match: "*"
        region: us-east-1
        log_group_name: "/aws/eks/gary-taleb-trading"
        log_stream_prefix: "trading-"
        auto_create_group: true

# Configuration for different environments
environments:
  production:
    replicaCount: 6
    resources:
      requests:
        memory: "2Gi"
        cpu: "1000m"
      limits:
        memory: "8Gi"
        cpu: "4000m"

  staging:
    replicaCount: 2
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "4Gi"
        cpu: "2000m"

# Compliance and audit settings
compliance:
  auditLogging: true
  dataRetention: "7y" # Financial regulations
  encryption:
    atRest: true
    inTransit: true

  securityScanning:
    enabled: true
    schedule: "0 3 * * *"

  backupCompliance:
    enabled: true
    encryption: true
    crossRegion: true
    retention: "7y"