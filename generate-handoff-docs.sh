#!/usr/bin/env bash
set -euo pipefail
d="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"; r="$(cd "$d/.." && pwd)"
[ -f "$d/lib/cleanup-commons.sh" ] && . "$d/lib/cleanup-commons.sh" || true
MAINT=$'# Maintenance Guide\n- Setup: clone, install deps (`npm ci`/`pip install -r requirements.txt`).\n- Dev: `npm start` or `./scripts/dev.sh`.\n- Test: `npm test --silent`.\n- Typecheck: `npm run typecheck`.\n- Lint: `npm run lint --silent`.\n- Coverage: `npm run coverage`.\n- Security: `semgrep --quiet --config p/owasp-top-ten --config configs/.semgrep.yml`.\n- Analyzer: `python -m analyzer.core --path . --policy nasa_jpl_pot10 --format json`.\n- Branching: feature branches + PRs; squash merge.\n- Releases: tag `vX.Y.Z`, changelog, CI green.\n- Deps: weekly `npm outdated`, `npm audit`.\n- CI failures: reproduce locally; fix or revert.\n- Logs: check `logs/` and CI artifacts.\n'
QUAL=$'# Quality Gates\n- Tests: `npm test --silent` must pass.\n- Types: `npm run typecheck` must pass.\n- Lint: `npm run lint --silent` must pass.\n- Coverage: no regression on changed lines; `npm run coverage`.\n- Budgets: <=25 LOC/change, <=2 files; limits on new critical/high findings.\n- Workflow: small PRs; include/adjust tests; link ticket.\n- Verify locally before PR; CI enforces same.\n'
ANALY=$'# Analyzer Guide\n- Run: `python -m analyzer.core --path . --policy nasa_jpl_pot10 --format json`.\n- Purpose: detect connascence and architecture hot spots.\n- Triage: fix `critical` first; keep MAX_CRITICAL_CONN <= 5.\n- Remediate: small refactors; add tests; isolate changes.\n- Report: save JSON to `.claude/.artifacts/qa.json` when applicable.\n- Tip: run after refactors; compare before/after.\n'
HAND=$'# Handoff Notes\n- Overview: purpose, key modules, entrypoints.\n- Architecture: main services, data flow, dependencies.\n- Commands: see QUALITY-GATES.md for test/typecheck/lint/coverage/security/analyzer.\n- Env: required vars in `.env.example` (update if missing).\n- Scripts: `scripts/generate-handoff-docs.sh` regenerates docs; keep updated.\n- Ownership: primary/backup maintainers, escalation contacts.\n- Backlog: top 5 tasks and known issues.\n- Risks: tech debt, flaky tests, coupling hot spots.\n- Next: pick one small, verifiable improvement and submit a PR.\n'
printf "%b" "$MAINT" > "$r/MAINTENANCE.md"
printf "%b" "$QUAL" > "$r/QUALITY-GATES.md"
printf "%b" "$ANALY" > "$r/ANALYZER-GUIDE.md"
printf "%b" "$HAND" > "$r/HANDOFF-NOTES.md"
echo "Generated MAINTENANCE.md, QUALITY-GATES.md, ANALYZER-GUIDE.md, HANDOFF-NOTES.md in $r"