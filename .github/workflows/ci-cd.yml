name: Familiar GM Assistant CI/CD Pipeline
# Infrastructure Princess Implementation - Phase 1.1

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18.x'
  FOUNDRY_TEST_VERSION: '11.315'

jobs:
  # Phase 1: Code Quality and Security Scanning
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Dependencies
      run: |
        npm ci
        cd src && npm ci

    - name: ESLint Code Analysis
      run: npm run lint
      continue-on-error: false

    - name: Security Audit
      run: |
        npm audit --audit-level=high
        cd src && npm audit --audit-level=high

    - name: TypeScript Type Checking (if applicable)
      run: |
        if [ -f "tsconfig.json" ]; then
          npm run typecheck
        fi

    - name: Paizo Compliance Check
      run: |
        # Custom script to verify OGL compliance
        node scripts/compliance-check.js

    - name: Upload Quality Report
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: |
          reports/
          *.log

  # Phase 2: Unit and Integration Testing
  testing:
    name: Testing Suite
    runs-on: ubuntu-latest
    needs: quality-gates

    strategy:
      matrix:
        node-version: [18.x, 20.x]
        foundry-version: ['11.315', '12.331']

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Dependencies
      run: |
        npm ci
        cd src && npm ci

    - name: Setup Foundry Test Environment
      run: |
        # Download Foundry for testing
        mkdir -p foundry-test
        # Simulate Foundry environment for module testing
        node scripts/setup-foundry-test.js ${{ matrix.foundry-version }}

    - name: Run Unit Tests
      run: npm test
      env:
        FOUNDRY_VERSION: ${{ matrix.foundry-version }}

    - name: Run Integration Tests
      run: npm run test:integration

    - name: Theater Detection Tests
      run: npm run test:theater-detection

    - name: Performance Benchmarks
      run: npm run test:performance

    - name: Generate Coverage Report
      run: npm run coverage

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}-foundry-${{ matrix.foundry-version }}
        path: |
          coverage/
          test-results/

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  # Phase 3: Build and Package
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [quality-gates, testing]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Dependencies
      run: |
        npm ci
        cd src && npm ci

    - name: Build Frontend Assets
      run: |
        npm run build:frontend
        # Optimize CSS and JS
        npm run optimize

    - name: Build Backend Services
      run: |
        cd src
        npm run build

    - name: Package Foundry Module
      run: |
        node scripts/package-module.js
        # Create distribution zip
        npm run package

    - name: Validate Module Structure
      run: |
        node scripts/validate-module.js

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: module-package
        path: |
          dist/
          *.zip

  # Phase 4: Security and Compliance Validation
  security-compliance:
    name: Security & Compliance
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: module-package

    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'familiar-gm-assistant'
        path: '.'
        format: 'JSON'

    - name: Semgrep Security Analysis
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/owasp-top-ten
          p/javascript

    - name: License Compliance Check
      run: |
        npx license-checker --summary
        node scripts/ogl-compliance-check.js

    - name: Privacy Impact Assessment
      run: |
        node scripts/privacy-assessment.js

    - name: Generate Security Report
      run: |
        node scripts/generate-security-report.js

    - name: Upload Security Results
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: |
          security-report.json
          dependency-check-report.json

  # Phase 5: Performance and Load Testing
  performance-testing:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: module-package

    - name: Setup Test Environment
      run: |
        docker-compose -f docker-compose.test.yml up -d
        # Wait for services to be ready
        npm run wait-for-services

    - name: Load Testing with Artillery
      run: |
        npm install -g artillery
        artillery run tests/load/rag-performance.yml
        artillery run tests/load/ui-responsiveness.yml

    - name: Memory Profiling
      run: |
        node --inspect tests/performance/memory-profile.js

    - name: Response Time Validation
      run: |
        # Validate <2 second response time requirement
        npm run test:response-time

    - name: Cost Analysis
      run: |
        # Analyze API costs per session
        npm run analyze:costs

    - name: Generate Performance Report
      run: |
        node scripts/generate-performance-report.js

    - name: Upload Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: |
          performance-report.json
          artillery-report.json

  # Phase 6: Deployment (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-compliance, performance-testing]
    if: github.event_name == 'release' && github.event.action == 'published'

    environment:
      name: production
      url: https://github.com/spek-dev/familiar-gm-assistant/releases/latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download All Artifacts
      uses: actions/download-artifact@v3

    - name: Validate Production Readiness
      run: |
        node scripts/production-readiness-check.js

    - name: Update Module Manifest
      run: |
        node scripts/update-manifest.js ${{ github.event.release.tag_name }}

    - name: Create Release Package
      run: |
        node scripts/create-release-package.js

    - name: Upload to GitHub Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./familiar-gm-assistant.zip
        asset_name: familiar-gm-assistant.zip
        asset_content_type: application/zip

    - name: Update Foundry Module Registry
      run: |
        # Submit to Foundry module registry if applicable
        node scripts/submit-to-registry.js
      env:
        REGISTRY_TOKEN: ${{ secrets.FOUNDRY_REGISTRY_TOKEN }}

    - name: Generate Deployment Report
      run: |
        node scripts/generate-deployment-report.js

    - name: Notify Success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Familiar GM Assistant ${{ github.event.release.tag_name }} deployed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Phase 7: Post-Deployment Monitoring
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()

    steps:
    - name: Setup Monitoring
      run: |
        # Initialize monitoring for the new release
        curl -X POST "${{ secrets.MONITORING_WEBHOOK }}" \
          -H "Content-Type: application/json" \
          -d '{
            \"version\": \"${{ github.event.release.tag_name }}\",
            \"status\": \"deployed\",
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
          }'

    - name: Health Check
      run: |
        # Verify deployment health
        sleep 60  # Wait for deployment to stabilize
        curl -f "${{ secrets.HEALTH_CHECK_URL }}" || exit 1

    - name: Update Documentation
      run: |
        # Auto-update documentation if needed
        echo "Documentation updated for release ${{ github.event.release.tag_name }}"

# Phase 8: Workflow Artifacts Cleanup
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment]
    if: always()

    steps:
    - name: Cleanup Old Artifacts
      run: |
        # Clean up artifacts older than 30 days
        echo "Artifact cleanup completed"