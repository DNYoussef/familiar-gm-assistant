name: Quality Assurance Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    outputs:
      quality-score: ${{ steps.analysis.outputs.score }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: ESLint Analysis
        run: |
          npm run lint:report

      - name: TypeScript Analysis
        run: |
          npm run typecheck:report

      - name: Complexity Analysis
        run: |
          npx plato -r -d reports/complexity src/

      - name: Code Quality Score
        id: analysis
        run: |
          # Calculate composite quality score
          LINT_SCORE=$(node scripts/calculate-lint-score.js)
          TYPE_SCORE=$(node scripts/calculate-type-score.js)
          COMPLEXITY_SCORE=$(node scripts/calculate-complexity-score.js)

          OVERALL_SCORE=$(echo "($LINT_SCORE + $TYPE_SCORE + $COMPLEXITY_SCORE) / 3" | bc)
          echo "::set-output name=score::$OVERALL_SCORE"

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: reports/

  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten

      - name: Run npm audit
        run: |
          npm audit --audit-level high
          npm audit fix --dry-run

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'familiar-project'
          path: '.'
          format: 'HTML'

  performance-testing:
    name: Performance Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: './config/lighthouse.json'
          uploadArtifacts: true

      - name: Load Testing
        run: |
          npm install -g artillery
          artillery run tests/performance/load-test.yml

      - name: Memory Profiling
        run: |
          node --inspect tests/performance/memory-profile.js

  accessibility-testing:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run axe-core tests
        run: npm run test:accessibility

      - name: WAVE Web Accessibility Evaluation
        run: |
          npm install -g wave-cli
          wave http://localhost:3000 --reporter json

  integration-testing:
    name: Integration Testing
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:setup:test

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

  e2e-testing:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: tests/e2e/results/

  quality-gate:
    name: Quality Gate Decision
    runs-on: ubuntu-latest
    needs: [code-quality, security-analysis, performance-testing, accessibility-testing, integration-testing, e2e-testing]
    if: always()
    outputs:
      gate-passed: ${{ steps.decision.outputs.passed }}
    steps:
      - name: Evaluate Quality Gate
        id: decision
        run: |
          QUALITY_SCORE=${{ needs.code-quality.outputs.quality-score }}

          echo "Quality Score: $QUALITY_SCORE"

          # Quality gate thresholds
          MIN_QUALITY_SCORE=85

          if [ "$QUALITY_SCORE" -ge "$MIN_QUALITY_SCORE" ]; then
            echo "Quality gate PASSED"
            echo "::set-output name=passed::true"
          else
            echo "Quality gate FAILED"
            echo "::set-output name=passed::false"
            exit 1
          fi

      - name: Update quality metrics
        run: |
          echo "Updating quality metrics dashboard..."
          # Update metrics dashboard