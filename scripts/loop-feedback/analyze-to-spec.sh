#!/bin/bash

# Loop Feedback: Analysis to Specification
# Converts Loop 3 quality analysis into Loop 1 specifications for improvement

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ARTIFACTS_DIR="${SCRIPT_DIR}/../../.claude/.artifacts"
ANALYSIS_FILE="${1:-${ARTIFACTS_DIR}/analysis-results.json}"
OUTPUT_SPEC="${2:-${ARTIFACTS_DIR}/improvement-spec.md}"

# Colors
CYAN='\033[0;36m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging
log_info() { echo -e "${CYAN}[FEEDBACK]${NC} $*"; }
log_success() { echo -e "${GREEN}[✓]${NC} $*"; }
log_warning() { echo -e "${YELLOW}[⚠]${NC} $*"; }

# Main conversion function
convert_analysis_to_spec() {
    log_info "Converting analysis results to improvement specification..."

    # Check if analysis file exists
    if [[ ! -f "$ANALYSIS_FILE" ]]; then
        log_warning "Analysis file not found: $ANALYSIS_FILE"
        exit 1
    fi

    # Extract key metrics from analysis
    local test_passing=$(grep '"passing"' "$ANALYSIS_FILE" | head -1 | cut -d: -f2 | tr -d ' ,' || echo "false")
    local lint_errors=$(grep '"errors"' "$ANALYSIS_FILE" | head -1 | cut -d: -f2 | tr -d ' ,' || echo "0")
    local security_issues=$(grep '"high_vulnerabilities"' "$ANALYSIS_FILE" | head -1 | cut -d: -f2 | tr -d ' ,' || echo "0")
    local overall_quality=$(grep '"overall_quality"' "$ANALYSIS_FILE" | cut -d'"' -f4 || echo "unknown")

    # Generate improvement specification
    cat > "$OUTPUT_SPEC" << EOF
# Improvement Specification
Generated from Loop 3 Analysis - $(date)

## Current State Analysis

### Quality Metrics
- Test Status: ${test_passing}
- Lint Errors: ${lint_errors}
- Security Issues: ${security_issues}
- Overall Quality: ${overall_quality}

## Improvement Requirements

### Priority 1: Critical Fixes
EOF

    # Add critical issues
    if [[ "$security_issues" -gt 0 ]]; then
        cat >> "$OUTPUT_SPEC" << EOF
#### Security Vulnerabilities
- **Issue**: ${security_issues} high/critical vulnerabilities detected
- **Requirement**: Eliminate all security vulnerabilities
- **Acceptance Criteria**:
  - npm audit shows 0 high/critical vulnerabilities
  - All dependencies updated to secure versions
  - Security scan passes

EOF
    fi

    if [[ "$test_passing" == "false" ]]; then
        cat >> "$OUTPUT_SPEC" << EOF
#### Test Failures
- **Issue**: Tests are failing
- **Requirement**: Fix all failing tests
- **Acceptance Criteria**:
  - All existing tests pass
  - No test regressions
  - Test coverage maintained or improved

EOF
    fi

    # Add quality improvements
    cat >> "$OUTPUT_SPEC" << EOF
### Priority 2: Quality Improvements

#### Code Quality
- **Current State**: ${lint_errors} lint errors detected
- **Target State**: Zero lint errors
- **Implementation**:
  1. Fix all ESLint errors
  2. Address all warnings
  3. Update lint configuration if needed

#### Test Coverage
- **Requirement**: Achieve 80%+ test coverage
- **Implementation**:
  1. Identify uncovered code paths
  2. Add unit tests for critical functions
  3. Add integration tests for key workflows

### Priority 3: Architecture Improvements

#### Module Structure
- **Requirement**: Reduce file complexity
- **Implementation**:
  1. Break down large files (>300 lines)
  2. Extract reusable modules
  3. Improve code organization

## Success Criteria

1. **Quality Gates**
   - All tests passing: ✓
   - Zero lint errors: ✓
   - No security vulnerabilities: ✓
   - Code coverage >= 80%: ✓

2. **Performance Metrics**
   - Build time < 60 seconds
   - Test execution < 30 seconds
   - Bundle size optimized

3. **Documentation**
   - All public APIs documented
   - README updated
   - Architecture diagrams current

## Implementation Plan

### Phase 1: Critical Fixes (Immediate)
1. Fix security vulnerabilities
2. Fix failing tests
3. Resolve lint errors

### Phase 2: Quality Improvements (Week 1)
1. Increase test coverage
2. Refactor complex functions
3. Update documentation

### Phase 3: Optimization (Week 2)
1. Performance tuning
2. Bundle optimization
3. CI/CD improvements

## Validation

After implementation, Loop 3 analysis must show:
- overall_quality: "good"
- All quality gates passing
- Measurable improvement in metrics

---
Generated by: analyze-to-spec.sh
Source: ${ANALYSIS_FILE}
EOF

    log_success "Specification generated: $OUTPUT_SPEC"

    # Generate task list for Loop 2
    generate_task_list
}

# Generate actionable task list
generate_task_list() {
    local task_file="${ARTIFACTS_DIR}/improvement-tasks.json"

    cat > "$task_file" << EOF
{
  "generated": "$(date -Iseconds)",
  "source": "Loop 3 Analysis",
  "tasks": [
EOF

    local task_count=0

    # Security tasks
    if [[ "$security_issues" -gt 0 ]]; then
        if [[ $task_count -gt 0 ]]; then echo "," >> "$task_file"; fi
        cat >> "$task_file" << EOF
    {
      "id": "SEC-001",
      "priority": "critical",
      "category": "security",
      "description": "Fix ${security_issues} security vulnerabilities",
      "command": "npm audit fix --force",
      "validation": "npm audit --audit-level=high"
    }
EOF
        ((task_count++))
    fi

    # Test tasks
    if [[ "$test_passing" == "false" ]]; then
        if [[ $task_count -gt 0 ]]; then echo "," >> "$task_file"; fi
        cat >> "$task_file" << EOF
    {
      "id": "TEST-001",
      "priority": "high",
      "category": "testing",
      "description": "Fix failing tests",
      "command": "npm test",
      "validation": "npm test -- --passWithNoTests"
    }
EOF
        ((task_count++))
    fi

    # Lint tasks
    if [[ "$lint_errors" -gt 0 ]]; then
        if [[ $task_count -gt 0 ]]; then echo "," >> "$task_file"; fi
        cat >> "$task_file" << EOF
    {
      "id": "LINT-001",
      "priority": "medium",
      "category": "quality",
      "description": "Fix ${lint_errors} lint errors",
      "command": "npm run lint -- --fix",
      "validation": "npm run lint"
    }
EOF
        ((task_count++))
    fi

    cat >> "$task_file" << EOF

  ],
  "total_tasks": ${task_count},
  "estimated_hours": $((task_count * 2))
}
EOF

    log_success "Task list generated: $task_file (${task_count} tasks)"
}

# Execute conversion
convert_analysis_to_spec

# Output summary
echo ""
log_success "Feedback conversion complete!"
log_info "Specification: $OUTPUT_SPEC"
log_info "Task List: ${ARTIFACTS_DIR}/improvement-tasks.json"
log_info "Ready for Loop 1 planning phase"