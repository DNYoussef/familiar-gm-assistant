#!/usr/bin/env bash
# Extract and format the top failing gate from gate.json for PR comments
# Integrates with GitHub PR status updates and SPEK-AUGMENT reporting

set -euo pipefail

GATE_FILE="${1:-.claude/.artifacts/gate.json}"
OUTPUT_FORMAT="${OUTPUT_FORMAT:-github}"  # github, slack, plain
MAX_DETAILS="${MAX_DETAILS:-3}"

# Check if gate file exists
if [[ ! -f "$GATE_FILE" ]]; then
    echo "[FAIL] Gate file not found: $GATE_FILE"
    exit 1
fi

# Parse gate results
parse_gate_results() {
    if ! jq empty "$GATE_FILE" 2>/dev/null; then
        echo "[FAIL] Invalid JSON in gate file: $GATE_FILE"
        exit 1
    fi
    
    local ok=$(jq -r '.ok // false' "$GATE_FILE")
    
    if [[ "$ok" == "true" ]]; then
        echo "[OK] All quality gates passed"
        return 0
    fi
    
    # Extract failed gates
    local failed_gates=$(jq -r '.gates | to_entries[] | select(.value.passed == false) | .key' "$GATE_FILE" 2>/dev/null || echo "")
    
    if [[ -z "$failed_gates" ]]; then
        echo "[U+2753] Gates marked as failed but no specific failures found"
        return 1
    fi
    
    # Format output based on requested format
    case "$OUTPUT_FORMAT" in
        github)
            format_github_output "$failed_gates"
            ;;
        slack)
            format_slack_output "$failed_gates"
            ;;
        plain)
            format_plain_output "$failed_gates"
            ;;
        *)
            echo "[FAIL] Unknown output format: $OUTPUT_FORMAT"
            exit 1
            ;;
    esac
}

# Format output for GitHub PR comments
format_github_output() {
    local failed_gates="$1"
    local gate_count=$(echo "$failed_gates" | wc -l)
    
    cat <<EOF
## [FAIL] Quality Gates Failed ($gate_count gate$([ $gate_count -ne 1 ] && echo "s"))

EOF
    
    while IFS= read -r gate; do
        [[ -z "$gate" ]] && continue
        
        local message=$(jq -r --arg gate "$gate" '.gates[$gate].message // "No message available"' "$GATE_FILE")
        local details=$(jq -r --arg gate "$gate" '.gates[$gate].details // empty' "$GATE_FILE" 2>/dev/null)
        
        cat <<EOF
### [U+1F6AB] $gate
**Issue**: $message

EOF
        
        # Add details if available
        if [[ -n "$details" && "$details" != "null" ]]; then
            format_github_details "$gate" "$details"
        fi
        
        # Add gate-specific help
        format_github_help "$gate"
        
        echo ""
    done <<< "$failed_gates"
    
    # Add summary and next steps
    cat <<EOF
---

### [TOOL] How to Fix
1. Run \`scripts/self_correct.sh\` locally to attempt automatic fixes
2. Or run individual commands:
   - Tests: \`npm test\`
   - Linting: \`npm run lint\`
   - Type checking: \`npm run typecheck\`
   - Security scan: \`claude /sec:scan\`

### [CHART] Gate Summary
$(jq -r '.summary | "- Total: \(.total)\n- Passed: \(.passed) [OK]\n- Failed: \(.failed) [FAIL]"' "$GATE_FILE")

*Generated by SPEK-AUGMENT quality gates*
EOF
}

# Format details for GitHub output
format_github_details() {
    local gate="$1"
    local details="$2"
    
    # Handle different detail formats
    if echo "$details" | jq empty 2>/dev/null; then
        # JSON details
        if echo "$details" | jq -e 'type == "array"' >/dev/null 2>&1; then
            echo "**Details**:"
            echo "$details" | jq -r '.[] | "- " + .' | head -n "$MAX_DETAILS"
            local total=$(echo "$details" | jq length)
            if [[ $total -gt $MAX_DETAILS ]]; then
                echo "- ... and $((total - MAX_DETAILS)) more"
            fi
        else
            echo "**Details**: $details"
        fi
    else
        # Plain text details
        echo "**Details**: $details"
    fi
    echo ""
}

# Add gate-specific help
format_github_help() {
    local gate="$1"
    
    case "$gate" in
        tests|test)
            cat <<EOF
**Quick Fix**:
\`\`\`bash
npm test
\`\`\`
EOF
            ;;
        lint|linting)
            cat <<EOF
**Quick Fix**:
\`\`\`bash
npm run lint --fix
\`\`\`
EOF
            ;;
        typecheck|types)
            cat <<EOF
**Quick Fix**:
\`\`\`bash
npm run typecheck
\`\`\`
EOF
            ;;
        security)
            cat <<EOF
**Quick Fix**:
\`\`\`bash
claude /sec:scan
# Review and address security issues
\`\`\`
EOF
            ;;
        coverage)
            cat <<EOF
**Quick Fix**:
\`\`\`bash
npm run test -- --coverage
# Add tests for uncovered code
\`\`\`
EOF
            ;;
        connascence)
            cat <<EOF
**Quick Fix**:
\`\`\`bash
claude /conn:scan
# Address high connascence coupling
\`\`\`
EOF
            ;;
    esac
}

# Format output for Slack
format_slack_output() {
    local failed_gates="$1"
    local gate_count=$(echo "$failed_gates" | wc -l)
    
    echo ":x: Quality Gates Failed ($gate_count gate$([ $gate_count -ne 1 ] && echo "s"))"
    echo ""
    
    while IFS= read -r gate; do
        [[ -z "$gate" ]] && continue
        
        local message=$(jq -r --arg gate "$gate" '.gates[$gate].message // "No message available"' "$GATE_FILE")
        echo ":no_entry_sign: *$gate*: $message"
    done <<< "$failed_gates"
    
    echo ""
    echo ":wrench: Run \`scripts/self_correct.sh\` to attempt automatic fixes"
}

# Format plain text output
format_plain_output() {
    local failed_gates="$1"
    local gate_count=$(echo "$failed_gates" | wc -l)
    
    echo "[FAIL] Quality Gates Failed ($gate_count gate$([ $gate_count -ne 1 ] && echo "s"))"
    echo ""
    
    while IFS= read -r gate; do
        [[ -z "$gate" ]] && continue
        
        local message=$(jq -r --arg gate "$gate" '.gates[$gate].message // "No message available"' "$GATE_FILE")
        echo "[U+2022] $gate: $message"
        
        # Add details if available
        local details=$(jq -r --arg gate "$gate" '.gates[$gate].details // empty' "$GATE_FILE" 2>/dev/null)
        if [[ -n "$details" && "$details" != "null" ]]; then
            if echo "$details" | jq -e 'type == "array"' >/dev/null 2>&1; then
                echo "$details" | jq -r '.[] | "  - " + .' | head -n "$MAX_DETAILS"
            else
                echo "  Details: $details"
            fi
        fi
        echo ""
    done <<< "$failed_gates"
    
    echo "Fix: Run 'scripts/self_correct.sh' to attempt automatic repairs"
}

# Generate PR status check update
generate_pr_status() {
    local ok=$(jq -r '.ok // false' "$GATE_FILE")
    local summary=$(jq -r '.summary | "Total: \(.total), Passed: \(.passed), Failed: \(.failed)"' "$GATE_FILE")
    
    if [[ "$ok" == "true" ]]; then
        echo "success"
        echo "All quality gates passed"
        echo "$summary"
    else
        echo "failure"
        echo "Quality gates failed"
        echo "$summary"
    fi
}

# Create GitHub PR comment file
create_pr_comment() {
    local comment_file=".claude/.artifacts/pr_comment.md"
    OUTPUT_FORMAT=github parse_gate_results > "$comment_file"
    echo "[NOTE] PR comment saved to: $comment_file"
    
    # Also create a shorter version for status checks
    local status_file=".claude/.artifacts/pr_status.txt"
    generate_pr_status > "$status_file"
    echo "[CLIPBOARD] PR status saved to: $status_file"
}

# Show help
show_help() {
    cat <<EOF
Gate Failure Reason Extractor

USAGE:
    $0 [gate-file] [command]

DESCRIPTION:
    Extracts and formats failing gate information from SPEK-AUGMENT gate results.
    
ARGUMENTS:
    gate-file           Path to gate.json file (default: .claude/.artifacts/gate.json)
    
COMMANDS:
    parse               Parse and display gate failures (default)
    pr-comment          Generate GitHub PR comment  
    pr-status           Generate PR status check info
    help                Show this help

ENVIRONMENT:
    OUTPUT_FORMAT       Output format: github, slack, plain (default: github)
    MAX_DETAILS         Maximum detail items to show (default: 3)

EXAMPLES:
    $0                                      # Parse default gate file
    $0 custom_gate.json                     # Parse custom gate file
    $0 .claude/.artifacts/gate.json pr-comment     # Generate PR comment
    OUTPUT_FORMAT=slack $0                  # Format for Slack
    OUTPUT_FORMAT=plain MAX_DETAILS=5 $0    # Plain format with more details

EXIT CODES:
    0 - All gates passed or successfully formatted failure info
    1 - Gate file issues or formatting errors
EOF
}

# Main command routing
main() {
    local command="${2:-parse}"
    
    case "$command" in
        parse)
            parse_gate_results
            ;;
        pr-comment)
            create_pr_comment
            ;;
        pr-status)
            generate_pr_status
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            echo "[FAIL] Unknown command: $command"
            echo "Use 'help' for usage information"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"